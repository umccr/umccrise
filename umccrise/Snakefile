""" UMCCR post-bcbio patient analysis workflow
"""
import os
import sys
import shutil
from os.path import dirname
from ngs_utils.bcbio import BcbioProject
from ngs_utils.logger import debug
from ngs_utils.utils import set_locale; set_locale()
from umccrise import prep_inputs, prep_stages, CustomProject

shell.executable(os.environ.get('SHELL', 'bash'))
shell.prefix("")

within_sub_workflow = 'within_sub_workflow' in config
config['within_sub_workflow'] = 'yes'  # to avoid redundant logging in cluster sub-executions of the Snakefile

py_path = sys.executable  # /miniconda/envs/umccrise/bin/python
env_path = dirname(dirname(py_path))  # /miniconda/envs/umccrise
conda_cmd = 'export PATH=' + env_path + '_{}/bin:$PATH; '

run, batch_by_name = prep_inputs(config, silent=within_sub_workflow)
threads_per_batch = config['threads_per_batch']
threads_per_sample = config['threads_per_sample']


stages = prep_stages(run,
                     [s for s in config.get('include_stages', '').split(',') if s],
                     [s for s in config.get('exclude_stages', '').split(',') if s])
debug(f'Stages to run: {stages}')


rule all:
    input: 'all.done'
    # A trick to avoid duplicating all input paths in the top "all" rule which has to be defined on top.


rule index_bam:
    input:
        bam = ancient('{path}.bam')
    output:
        bam = '{path}.bam.bai'
    threads: threads_per_sample
    shell:
        'samtools index -@{threads} {input.bam}'


include: "conpair.smk"
include: "structural.smk"
include: "somatic.smk"
include: "germline.smk"
include: "purple.smk"
include: "coverage.smk"
include: "pcgr.smk"
include: "oncoviruses.smk"
include: "cancer_report.smk"
include: "multiqc.smk"


localrules: umccrise, copy_config, copy_tsv_inputs


# Copy all files from the config/ directory, omitting all directories
# Omitting directories prevents from errors on IAP when the input mount is read-only,
# and the directory copied with cp -r inherits the read-only flags, preventing snakemake
# from creating files inside of it
rule copy_config:
    input:
        conf_dir = run.config_dir if isinstance(run, BcbioProject) else []
    output:
        done_flag = 'log/config/config.done',
    params:
        conf_dir = 'log/config',
    shell:
        'for f in {input.conf_dir}/*; do test ! -f $f || cp $f {params.conf_dir}/; done && '
        'touch {output.done_flag}'


rule copy_tsv_inputs:
    input:
        tsv_fpaths = run.input_tsv_fpaths if isinstance(run, CustomProject) else []
    output:
        done_flag = 'log/config/tsv_inputs.done',
    params:
        conf_dir = 'log/config',
    shell:
        'for f in {input.tsv_fpaths}; do test ! -f $f || cp $f {params.conf_dir}/; done && '
        'touch {output.done_flag}'


rule umccrise:
    # Copy here output of the "milestone" rules
    # (rules without output defined in the end of each Snakemake.* file)
    input:
        rules.copy_config.output      if isinstance(run, BcbioProject) else [],
        rules.copy_tsv_inputs.output  if getattr(run, 'input_tsv_fpaths', None) else [],
        rules.conpair.output          if 'conpair'          in stages else [],
        rules.structural.output       if 'structural'       in stages else [],
        rules.somatic.output          if 'somatic'          in stages else [],
        rules.maf.output              if 'maf'              in stages else [],
        rules.germline.output         if 'germline'         in stages else [],
        rules.purple.output           if 'purple'           in stages else [],
        rules.cacao.output            if 'cacao'            in stages else [],
        rules.mosdepth.output         if 'mosdepth'         in stages else [],
        rules.samtools_stats.output   if 'samtools_stats'   in stages else [],
        rules.goleft.output           if 'goleft'           in stages else [],
        rules.pcgr.output             if 'pcgr'             in stages else [],
        rules.cpsr.output             if 'cpsr'             in stages else [],
        rules.oncoviruses.output      if 'oncoviruses'      in stages else [],
        rules.cancer_report.output    if 'cancer_report'    in stages else [],
        rules.multiqc.output          if 'multiqc'          in stages else [],
    output:
        touch('all.done')

onsuccess:
    print("Workflow finished! Deleting .snakemake/metadata")
    shutil.rmtree(".snakemake/metadata")
