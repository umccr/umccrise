#!/usr/bin/env python

import os
import platform
import sys
import glob
from os import rename
from os.path import isfile, join, dirname, abspath, basename, exists
import click
import subprocess
import toml
import tempfile
from distutils.version import LooseVersion

from ngs_utils.call_process import run_simple
from ngs_utils.file_utils import verify_file, safe_mkdir, splitext_plus
from ngs_utils import logger
from ngs_utils.logger import info, critical, err
from ngs_utils.utils import set_locale; set_locale()
from umccrise import package_path

@click.command()
@click.argument('vcf_path', type=click.Path(exists=True))
@click.argument('purple_tsv', type=click.Path(exists=True), required=False)
@click.option('-g', 'genome')
@click.option('-o', 'output_dir', type=click.Path())
@click.option('-s', 'sample')
@click.option('--germline', is_flag=True)
@click.option('--docker/--no-docker', 'use_docker', is_flag=True, default=None)
@click.option('--pcgr-data', type=click.Path(exists=True),
              help='Path to PCGR data directory (defaults are known for spartan and raijin, '
                   'or if --genomes-dir is provided)')
@click.option('--genomes-dir', 'genomes_dir')
@click.option('--purity', 'purity', type=click.FLOAT)
@click.option('--ploidy', 'ploidy', type=click.FLOAT)
@click.option('--predispose-genes', 'predispose_genes', type=click.Path(exists=True))
@click.option('--vep_no_intergenic', is_flag=True)
@click.option('--vep_coding_only', is_flag=True)
def main(vcf_path, purple_tsv=None, output_dir=None, genome=None, sample=None, germline=False, use_docker=None,
         pcgr_data=None, genomes_dir=None, purity=None, ploidy=None, predispose_genes=None, vep_no_intergenic=None, vep_coding_only=None):

    if not pcgr_data:
        from reference_data import api as refdata
        if genomes_dir:
            refdata.find_genomes_dir(genomes_dir)
        pcgr_data = refdata.get_ref_file(genome=genome, key='pcgr_data')
        if not pcgr_data:
            logger.critical(f'PCGR data is not found on the system "{refdata.name}".'
                            f' Please, provide the path to PCGR data with --pcgr-data.'
                            f' Follow `https://github.com/vladsaveliev/pcgr` to get it.')

    if vcf_path.endswith('.vcf'):
        run_simple(f'bgzip {vcf_path}')
        vcf_path = vcf_path + '.gz'
    if not isfile(vcf_path + '.tbi'):
        run_simple(f'tabix -p vcf {vcf_path}')

    output_dir = output_dir or 'pcgrred'
    output_dir = abspath(output_dir)
    safe_mkdir(output_dir)
    logger.init(log_fpath_=join(output_dir, 'pcgr.log'), save_previous=True)

    pcgr_toml = join(package_path(), 'pcgr', 'pcgr.toml')
    cpsr_toml = join(package_path(), 'pcgr', 'cpsr.toml')
    if vep_no_intergenic:
        pcgr_toml = toml_with_vep_no_intergenic(pcgr_toml)
    if vep_coding_only:
        pcgr_toml = toml_with_vep_coding_only(pcgr_toml)
    sample = sample or splitext_plus(basename(vcf_path))[0]
    sample_cropped = sample[:35]  # pcgr requires sample names shorter than 35
    if genome is None:
        genome = 'GRCh37'
    pcgr_genome = 'grch38' if ('38' in genome) else 'grch37'
    print('use_docker:', use_docker)
    if use_docker is None:
        check_docker_command = 'docker images -q sigven/pcgr'
        try:
            output = subprocess.check_output(check_docker_command, stderr=subprocess.STDOUT, shell=True)
        except subprocess.CalledProcessError:
            if platform.system() == 'Darwin':
                critical('Docker is not running. Cannot run PCGR without Docker on macOS.')
            else:
                logger.warn('Docker is not running Trying running in --no-docker mode.')
        else:
            if len(output) == 0:
                logger.warn('Docker image sigven/pcgr not found, trying running in --no-docker mode')
                use_docker = False
            else:
                use_docker = True

    if germline:
        is_old_cpsr = check_cpsr_version()

        expected_file_base = join(output_dir, f'{sample_cropped}.cpsr.{pcgr_genome}')
        renamed_file_base = join(output_dir, f'{sample}.cpsr')

        panel_param = '--panel_id 0'
        if predispose_genes and not is_old_cpsr:
            panel_param = f'--custom_list {predispose_genes}'

        if is_old_cpsr:
            cmd = (f'cpsr.py'
                   f' {abspath(vcf_path)}'
                   f' {dirname(pcgr_data)}'
                   f' {output_dir}'
                   f' {pcgr_genome}'
                   f' {cpsr_toml}'
                   f' {sample_cropped}'
                   f' {" --docker-uid root" if use_docker else " --no-docker"}'
                   f' --force_overwrite'
                   f' --no_vcf_validate'
                   f' {panel_param}'
                   f' --debug')
        else:
            cmd = (f'cpsr.py'
                   f' --query_vcf {abspath(vcf_path)}'
                   f' --pcgr_dir {dirname(pcgr_data)}'
                   f' --output_dir {output_dir}'
                   f' --genome_assembly {pcgr_genome}'
                   f' --conf {cpsr_toml}'
                   f' --sample_id {sample_cropped}'
                   f' {" --docker-uid root" if use_docker else " --no-docker"}'
                   f' --force_overwrite'
                   f' --no_vcf_validate'
                   f' {panel_param}'
                   f' --debug')
    else:
        is_old_pcgr = check_pcgr_version()

        expected_file_base = join(output_dir, f'{sample_cropped}.pcgr_acmg.{pcgr_genome}')
        renamed_file_base = join(output_dir, f'{sample}.pcgr')

        purple_tsv_fixed = None
        if purple_tsv:
            purple_tsv_fixed = join(output_dir, sample + '_cnv_input.tsv')
            prep_cnv_cmd = f'(echo -e "Chromosome\\tStart\\tEnd\\tSegment_Mean" ; cat {abspath(purple_tsv)} | ' \
                           f'grep -v ^# | grep -v ^GL | cut -f1,2,3,4 | awk -v OFS="\\t" \'{{ if ($4<=0) ' \
                           f'{{ print $1,$2,$3,-4 }} else {{ print $1,$2,$3, log($4/2)/log(2) }} }}\') > ' \
                           f'{purple_tsv_fixed}'
            run_simple(prep_cnv_cmd)
        if is_old_pcgr:
            cmd = (f'pcgr.py'
                   f' --input_vcf {abspath(vcf_path)}' +
                  (f' --input_cna {purple_tsv_fixed}' if purple_tsv_fixed else '') +
                   f' {dirname(pcgr_data)}'
                   f' {output_dir}'
                   f' {pcgr_genome}'
                   f' {pcgr_toml}'
                   f' {sample_cropped}'
                   f' {" --docker-uid root" if use_docker else " --no-docker"}'
                   f' --force_overwrite'
                   f' --no_vcf_validate' +
                  (f' --tumor_purity {purity}' if purity else '') +
                  (f' --tumor_ploidy {ploidy}' if ploidy else '') +
                   f' --debug')
        else:
            cmd = (f'pcgr.py'
                   f' --input_vcf {abspath(vcf_path)}' +
                  (f' --input_cna {purple_tsv_fixed}' if purple_tsv_fixed else '') +
                   f' --pcgr_dir {dirname(pcgr_data)}'
                   f' --output_dir {output_dir}'
                   f' --genome_assembly {pcgr_genome}'
                   f' --conf {pcgr_toml}'
                   f' --sample_id {sample_cropped}'
                   f' {" --docker-uid root" if use_docker else " --no-docker"}'
                   f' --force_overwrite'
                   f' --no_vcf_validate' +
                  (f' --tumor_purity {purity}' if purity else '') +
                  (f' --tumor_ploidy {ploidy}' if ploidy else '') +
                   f' --debug ' +
                   f' --estimate_tmb ' +
                   f' --estimate_msi_status ' +
                   f' --include_trials ' +
                   f' --assay WGS '
               )
    try:
        run_simple(cmd)
    except subprocess.SubprocessError:
        err('--------\n')
        err(f'Error running {"PCGR" if not germline else "CPSR"}.\n')
        raise

    err(f'Finished {"PCGR" if not germline else "CPSR"}.\n')
    for expected_fpath in glob.glob(f'{expected_file_base}*'):
        if isfile(expected_fpath):
            renamed_fpath = expected_fpath.replace(expected_file_base, renamed_file_base)
            rename(expected_fpath, renamed_fpath)
            if renamed_fpath.endswith('.html'):
                info(f'{"PCGR" if not germline else "CPSR"} report: {renamed_fpath}')


def check_pcgr_version():
    res = subprocess.check_output('pcgr.py --version', shell=True)
    if not isinstance(res, str):
        res = res.decode(errors='replace')
    v = res.split()[1]  # pcgr.py 0.9.0rc
    is_old = LooseVersion(v) < LooseVersion('0.9.0')
    if is_old:
        info(f'PCGR version {v} is older than 0.9.0, so using the old syntax')
    return is_old

def check_cpsr_version():
    res = subprocess.check_output('cpsr.py --version', shell=True)
    if not isinstance(res, str):
        res = res.decode(errors='replace')
    v = res.split()[1]  # pcgr.py 0.9.0rc
    is_old = LooseVersion(v) < LooseVersion('0.6.0')
    if is_old:
        info(f'CPSR version {v} is older than 0.6.0, so using the old syntax')
    return is_old

def toml_with_vep_no_intergenic(pcgr_toml):
    # Read the pcgr_toml and modify the vep_skip_intergenic option.
    # Output new toml to temp file, and return its path.
    fd, path = tempfile.mkstemp(suffix=".toml")
    x = toml.load(pcgr_toml)
    x["other"]["vep_skip_intergenic"] = True
    with os.fdopen(fd, "w") as tmp:
        foo = toml.dump(x, tmp)
    return path

def toml_with_vep_coding_only(pcgr_toml):
    # Read the pcgr_toml and modify the other.vep_pick_order option.
    # This is a hack to get PCGR-VEP to annotate only coding variants.
    # Output new toml to temp file, and return its path.
    # This will only work with PCGR < v1, since it doesn't use the
    # vep_pick_order in pcgr.R to cause parsing issues.
    fd, path = tempfile.mkstemp(suffix=".toml")
    x = toml.load(pcgr_toml)
    x["other"]["vep_pick_order"] = "biotype,rank,appris,tsl,ccds,canonical,length,mane, --coding_only"
    with os.fdopen(fd, "w") as tmp:
        foo = toml.dump(x, tmp)
    return path

if __name__ == '__main__':
    main()
